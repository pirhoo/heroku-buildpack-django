#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -eo pipefail

# Prepend proper path for virtualenv hackery. Will be deprecated soon.
export PATH=:/usr/local/bin:$PATH

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2

NAME=$($BIN_DIR/detect $BUILD_DIR)
PIP_DOWNLOAD_CACHE=${PIP_DOWNLOAD_CACHE:-$CACHE_DIR/pip_downloads}
VIRTUALENV_DIRS="bin include lib"
VENDORED_MEMCACHED="http://cl.ly/0a191R3K160t1w1P0N25/vendor-libmemcached.tar.gz"

unset GIT_DIR
export PIP_DOWNLOAD_CACHE

indent() {
  RE="s/^/       /"
  [ $(uname) == "Darwin" ] && sed -l "$RE" || sed -u "$RE"
}

function virtualenv (){
  python "$ROOT_DIR/src/virtualenv-1.7/virtualenv.py" "$@"
}

cd $BUILD_DIR

# Reject a non-packaged Django app.
if [ "$NAME" = "Python" ]; then
  [ -f manage.py ] && [ -f settings.py ] && { echo " !     Django app must be in a package subdirectory"; exit 1; }
fi

# Warn a checked-in virtualenv.
if [ -d "lib" ] || [ -d "bin" ]; then
  echo " !     You have a virtualenv checked in. You should ignore the appropriate paths in your repo. See http://devcenter.heroku.com/articles/gitignore for more info.";
fi

# Reject a conflicting checked-in virtualenv.
if [ -f "lib/python2.7" ]; then
  echo " !     Checked-in virtualenv conflict."
  exit 1;
fi

# Copy artifacts out of cache if exists.
mkdir -p $CACHE_DIR
for dir in $VIRTUALENV_DIRS; do
  cp -R $CACHE_DIR/$dir . &> /dev/null || true
done

# Create virtualenv. Rebuild if corrupt.
set +e
echo "-----> Preparing virtualenv version $(virtualenv --version)"

# Try to create the virtualenv.
OUT=$(virtualenv --distribute --never-download  --prompt=venv . 2>&1)

[ $? -ne 0 -o -n "$CLEAN_VIRTUALENV" ] && {
  if [ -n "$CLEAN_VIRTUALENV" ]
    then echo " !     CLEAN_VIRTUALENV set, rebuilding virtualenv."
    else echo " !     Virtualenv corrupt, rebuilding."
  fi
  for dir in $VIRTUALENV_DIRS; do
    rm -fr $dir &> /dev/null || true
  done  
  OUT=$(virtualenv --distribute --never-download  --prompt=venv . )
  # OUT=$(virtualenv --python $PYTHON_EXE --distribute --never-download  --prompt='(venv) ' $VIRTUALENV_LOC )
}
echo "$OUT" | indent

set -e

# Create set-aside .heroku folder.
mkdir -p .heroku

# Pylibmc support.
source $BIN_DIR/steps/pylibmc

# Activate the virtualenv.
echo "-----> Activating virtualenv"
source bin/activate

# Install mercurial, if needed.
if (grep -Fiq "hg+" requirements.txt) then
  pip install --use-mirrors mercurial | indent
fi

# Install dependencies.
pip install distribute==0.6.30
echo "-----> Installing dependencies using pip version $(pip --version | awk '{print $2}')"
pip install --use-mirrors -r requirements.txt --src ./.heroku/src | indent

# Django support.
if [ "$NAME" = "Python/Django" ] && ! [ "$DISABLE_INJECTION" ]; then
  source $BIN_DIR/steps/django
fi

# Make virtualenv relocatable.
set +e
OUT=$(virtualenv --relocatable .)
[ $? -ne 0 ] && {
  echo " !     Error making virtualenv relocatable"
  echo "$OUT" | indent
  exit 1
}
set -e

# Store new artifacts in cache.
for dir in $VIRTUALENV_DIRS; do
  rm -rf $CACHE_DIR/$dir
  cp -R $dir $CACHE_DIR/
done

if [ -f $1/npm_requirements.txt ]; then
  source $BIN_DIR/compilenodejs $1 $2
fi

echo "-----> Installing dependencies with Bower"
cd $BUILD_DIR
# Clean bower's cache dir
bower cache clean
# All bower packages
BOWER_LIST=`bower list -p`
# If the list is not empty
if [ "$BOWER_LIST" != '{}' ]
    then 
        # Extract packages names line by line
        BOWER_FREEZE=`echo "$BOWER_LIST" | grep -oE  '".*":' | sed 's/"\(.*\)":/\1/'`
        # Uninstall the packages
        echo "$BOWER_FREEZE" | xargs bower uninstall
fi
# Load bower packages
bower install --force
